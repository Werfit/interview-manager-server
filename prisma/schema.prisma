// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique

  firstName String?
  lastName  String?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]

  ownedOrganization Organization? @relation(name: "organization_owner_id")

  interviews   Interview[]
  participants Participant[]
}

model Organization {
  id   String @id @default(uuid())
  name String @unique

  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id], name: "organization_owner_id")

  users User[] @relation(name: "organization")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interview          Interview[]
  interviewStatuses  InterviewStatus[]
  interviewPositions InterviewPosition[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Interview {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  description String
  date        DateTime

  interviewerId String
  interviewer   User   @relation(fields: [interviewerId], references: [id])

  statusId String
  status   InterviewStatus @relation(fields: [statusId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  positionId String
  position   InterviewPosition @relation(fields: [positionId], references: [id])

  recordings     Attachment[]
  transcriptions Transcription[]

  chat Chat?
}

model InterviewStatus {
  id          String @id @default(uuid())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews Interview[]

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  nextStatusId     String?
  nextStatus       InterviewStatus?  @relation("status_flow", fields: [nextStatusId], references: [id])
  previousStatuses InterviewStatus[] @relation("status_flow")

  fromStatusUpdates InterviewStatusUpdate[] @relation("status_update_from")
  toStatusUpdates   InterviewStatusUpdate[] @relation("status_update_to")

  @@unique([organizationId, name])
}

model InterviewStatusUpdate {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromStatusId String
  fromStatus   InterviewStatus @relation(fields: [fromStatusId], references: [id], name: "status_update_from")

  toStatusId String
  toStatus   InterviewStatus @relation(fields: [toStatusId], references: [id], name: "status_update_to")

  @@unique([fromStatusId, toStatusId])
}

model InterviewPosition {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  interviews Interview[]

  @@unique([organizationId, name])
}

model Candidate {
  id String @id @default(uuid())

  name  String
  email String      @unique
  phone String?
  cv    Attachment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews Interview[]
}

enum AttachmentType {
  PDF
  VIDEO
  IMAGE
}

enum AttachmentStatus {
  PENDING
  COMPLETED
}

model Attachment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type AttachmentType
  url  String

  status AttachmentStatus @default(PENDING)

  candidateId String?    @unique
  candidate   Candidate? @relation(fields: [candidateId], references: [id])

  interviewId String?
  interview   Interview? @relation(fields: [interviewId], references: [id])

  thumbnail   Attachment? @relation(fields: [thumbnailId], references: [id], name: "attachment_thumbnail")
  thumbnailId String?     @unique

  thumbnailFor Attachment? @relation("attachment_thumbnail")

  transcriptions Transcription[]
}

enum TranscriptionStatus {
  PENDING
  COMPLETED
}

model Transcription {
  id      String @id @default(uuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status TranscriptionStatus @default(PENDING)

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id])

  recordingId String
  recording   Attachment @relation(fields: [recordingId], references: [id])
}

model Chat {
  id String @id @default(uuid())

  interviewId String    @unique
  interview   Interview @relation(fields: [interviewId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants Participant[]
}

enum ParticipantType {
  USER
  AGENT // AI agent
}

model Participant {
  id String @id @default(uuid())

  type ParticipantType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  messages Message[]
}

model Message {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  content String

  senderId String
  sender   Participant @relation(fields: [senderId], references: [id])
}
